<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>permutationfile = file_text_open_read("permutation.dat");
if (permutationfile != -1) {
    for (i = 0; i &lt; 256; ++i) {
        val = file_text_read_real(permutationfile);
        file_text_readln(permutationfile);
        global.permutation[i] = val;
        global.permutation[i+256] = val;
    }
}
file_text_close(permutationfile);

scale_factor = 5.0;
level_index = random_range(0, 256);
height = random_range(0.25, 0.85);
screen_height = surface_get_height(application_surface);
screen_width = surface_get_width(application_surface);
global.noiseSurface = surface_create(screen_width, screen_height);
surface_set_target(global.noiseSurface);

noisemax = -999000000;
noisemin = 999000000;
//for (i = 0; i &lt; screen_height; ++i) {
    for (j = 0; j &lt; screen_width; ++j) {
        val = noise(j / scale_factor, level_index / scale_factor, 0)
        global.noisearray[j] = val;
        if (val &lt; noisemin) {
            noisemin = val;
        }
        if (val &gt; noisemax) {
            noisemax = val;
        }
        
    }
//}

//for (i = 0; i &lt; screen_height; ++i) {
    for (j = 0; j &lt; screen_width; ++j) {
        global.noisearray[j] += noisemin;
        global.noisearray[j] /= (noisemax - noisemin);
        global.noisearray[j] *= height;
        
        intensity = floor(global.noisearray[j] * 256);
        global.intensityArray[j] = intensity;
        color = make_color_rgb(intensity, intensity, intensity);
        draw_set_color(c_white);
        draw_line(j, screen_height - 1, j, screen_height - 1 + (screen_height * global.noisearray[j]));
    }
//}

    
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(global.noiseSurface, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level_index = random_range(0, 256);
height = random_range(0.25, 0.85);
surface_set_target(global.noiseSurface);
draw_set_color(c_black);
draw_rectangle(0, 0, screen_width - 1, screen_height - 1, false);

noisemax = -999000000;
noisemin = 999000000;
//for (i = 0; i &lt; screen_height; ++i) {
    for (j = 0; j &lt; screen_width; ++j) {
        val = noise(j / scale_factor, level_index / scale_factor, 0)
        global.noisearray[j] = val;
        if (val &lt; noisemin) {
            noisemin = val;
        }
        if (val &gt; noisemax) {
            noisemax = val;
        }
        
    }
//}

//for (i = 0; i &lt; screen_height; ++i) {
    for (j = 0; j &lt; screen_width; ++j) {
        global.noisearray[j] += noisemin;
        global.noisearray[j] /= (noisemax - noisemin);
        global.noisearray[j] *= height;
        
        intensity = floor(global.noisearray[j] * 256);
        global.intensityArray[j] = intensity;
        color = make_color_rgb(intensity, intensity, intensity);
        draw_set_color(c_white);
        draw_line(j, screen_height - 1, j, screen_height - 1 + (screen_height * global.noisearray[j]));
    }
//}

    
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
