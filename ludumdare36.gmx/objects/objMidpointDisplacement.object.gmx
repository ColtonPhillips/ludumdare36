<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>smoothness = random_range(0.85, 1);
width = surface_get_width(application_surface);

size = 2;
while (size + 1 &lt; width) {
        size *= 2;
}
 
width = size + 1;

// init
for (i = 0; i &lt; width; i++) {
    global.heightmap[i] = 0;
}

// setup
randomize();
global.heightmap[0] = random_range(0, 0.8);
global.heightmap[width-1] = random_range(0, 0.8);

toProcess = ds_stack_create();
process = ds_map_create();
ds_map_add(process, "left", 0);
ds_map_add(process, "right", size - 1);
ds_map_add(process, "offset", smoothness);
ds_stack_push(toProcess, process);

// process
hmin = min(global.heightmap[0], global.heightmap[size-1]);
hmax = max(global.heightmap[0], global.heightmap[size-1]);
while (ds_stack_size(toProcess) != 0) {
    process = ds_stack_pop(toProcess);
    low = process[? "left"];
    high = process[? "right"];
    offset = process[? "offset"];
    midPoint = round((low + high) / 2);

    global.heightmap[midPoint] = ((global.heightmap[low] + global.heightmap[high]) / 2) + random_range( -offset, offset);
    hmin = min(global.heightmap[midPoint], hmin);
    hmax = max(global.heightmap[midPoint], hmax);
    ds_map_destroy(process);
    
    // terminating condition
    if (high - midPoint != 1) {
        left = ds_map_create();
        right = ds_map_create();
        
        ds_map_add(left, "left", low);
        ds_map_add(left, "right", midPoint);
        ds_map_add(left, "offset", offset / power(2, smoothness));
        ds_stack_push(toProcess, left);
        
        ds_map_add(right, "left", midPoint);
        ds_map_add(right, "right", high);
        ds_map_add(right, "offset", offset / power(2, smoothness));
        ds_stack_push(toProcess, right);
    }
}

ds_stack_destroy(toProcess);

// normalize
range = hmax - hmin;
for (i = 0; i &lt; width; i++) {
    global.heightmap[i] = (global.heightmap[i] - hmin) / range;
    global.heightmap[i] *= 0.8;
}

global.heightSurface = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
surface_set_target(global.heightSurface);
screen_width = surface_get_width(application_surface);
screen_height = surface_get_height(application_surface);
draw_set_color(make_color_rgb(147, 187, 25));

for (i = 0; i &lt; screen_width; ++i) {
    draw_line(i, (screen_height - 1) - (global.heightmap[i] * screen_height), i, screen_height - 1);
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>smoothness = random_range(0.85, 1);

// setup
randomize();
global.heightmap[0] = random_range(0, 0.8);
global.heightmap[width-1] = random_range(0, 0.8);

toProcess = ds_stack_create();
process = ds_map_create();
ds_map_add(process, "left", 0);
ds_map_add(process, "right", size - 1);
ds_map_add(process, "offset", smoothness);
ds_stack_push(toProcess, process);

// process
hmin = min(global.heightmap[0], global.heightmap[size-1]);
hmax = max(global.heightmap[0], global.heightmap[size-1]);
while (ds_stack_size(toProcess) != 0) {
    process = ds_stack_pop(toProcess);
    low = process[? "left"];
    high = process[? "right"];
    offset = process[? "offset"];
    midPoint = round((low + high) / 2);

    global.heightmap[midPoint] = ((global.heightmap[low] + global.heightmap[high]) / 2) + random_range( -offset, offset);
    hmin = min(global.heightmap[midPoint], hmin);
    hmax = max(global.heightmap[midPoint], hmax);
    ds_map_destroy(process);
    
    // terminating condition
    if (high - midPoint != 1) {
        left = ds_map_create();
        right = ds_map_create();
        
        ds_map_add(left, "left", low);
        ds_map_add(left, "right", midPoint);
        ds_map_add(left, "offset", offset / power(2, smoothness));
        ds_stack_push(toProcess, left);
        
        ds_map_add(right, "left", midPoint);
        ds_map_add(right, "right", high);
        ds_map_add(right, "offset", offset / power(2, smoothness));
        ds_stack_push(toProcess, right);
    }
}

ds_stack_destroy(toProcess);

// normalize
range = hmax - hmin;
for (i = 0; i &lt; width; i++) {
    global.heightmap[i] = (global.heightmap[i] - hmin) / range;
    global.heightmap[i] *= 0.85;
}

global.heightSurface = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));
surface_set_target(global.heightSurface);
screen_width = surface_get_width(application_surface);
screen_height = surface_get_height(application_surface);
draw_set_color(make_color_rgb(147, 187, 25));

for (i = 0; i &lt; screen_width; ++i) {
    draw_line(i, (screen_height - 1) - (global.heightmap[i] * screen_height), i, screen_height - 1);
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
